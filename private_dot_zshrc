# Options {{{
setopt extended_glob

stty -ixon
# }}}

# function zvm_config() {
#   ZVM_KEYTIMEOUT=0.20 #default is 0.4 sec
#   ZVM_ESCAPE_KEYTIMEOUT=0.001 #default is 0.03 sec
# }
# source "/usr/local/opt/zsh-vi-mode/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh"

source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

export LC_ALL=en_US.UTF-8
export FZF_DEFAULT_OPTS="--height=50% --min-height=15 --reverse"
export FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs --hidden'
export FZF_CTRL_T_OPTS="
  --preview 'bat -n --color=always {}'
  --bind 'ctrl-/:change-preview-window(down|hidden|)'
  --color header:italic
  --header 'Press CTRL-/ to toggle preview style'"

export FZF_CTRL_R_OPTS='
  --color header:italic
  --header "'\''word=exact \^word=start .ts\$=end !word=inverse"'

export GPG_TTY=`tty`
export EDITOR="nvim"
export VISUAL="nvim"
eval "$(rbenv init -)"

SPACESHIP_PROMPT_ORDER=(
  #time          # Time stamps section
  user          # Username section
  host          # Hostname section
  dir           # Current directory section
  git           # Git section (git_branch + git_status)
  #hg            # Mercurial section (hg_branch  + hg_status)
  package       # Package version
  node          # Node.js section
  ruby          # Ruby section
  #elixir        # Elixir section
  #xcode         # Xcode section
  #swift         # Swift section
  #golang        # Go section
  #php           # PHP section
  rust          # Rust section
  #haskell       # Haskell Stack section
  #julia         # Julia section
  docker        # Docker section
  aws           # Amazon Web Services section
  venv          # virtualenv section
  conda         # conda virtualenv section
  pyenv         # Pyenv section
  #dotnet        # .NET section
  #ember         # Ember.js section
  #kubecontext   # Kubectl context section
  #terraform     # Terraform workspace section
  exec_time     # Execution time
  line_sep      # Line break
  battery       # Battery level and status
  vi_mode       # Vi-mode indicator
  jobs          # Background jobs indicator
  exit_code     # Exit code section
  char          # Prompt character
)
SPACESHIP_GIT_STATUS_COLOR=145

# VI Mode
bindkey -v
KEYTIMEOUT=1
SPACESHIP_VI_MODE_INSERT="\u270E"
SPACESHIP_VI_MODE_NORMAL="\u2328"

function zle-keymap-select zle-line-init # only reset cursor when init and select (not finish)
{
  case $KEYMAP in
      vicmd)      print -n '\033[2 q';; # block cursor 1 with blick 2 without
      viins|main) print -n '\033[6 q';; # line cursor 5 with blink 6 without
  esac

  zle reset-prompt
  zle -R
}

function zle-line-finish
{
  print -n '\033[2 q'; # block cursor 1 with blick 2 without
}

zle -N zle-line-init
zle -N zle-line-finish
zle -N zle-keymap-select

bindkey -M viins "^R" fzf-history-widget # restore ^R with vi mode
bindkey -M viins "^T" fzf-file-widget # restore ^T with vi mode
bindkey -M viins '^[[A' history-substring-search-up
bindkey -M viins '^[[B' history-substring-search-down

# alias
alias aider='branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "default"); timestamp=$(date "+%Y%m%d_%H%M"); mkdir -p ".aider.history/$(dirname "$branch")" ; aider --input-history-file ".aider.history/$branch-$timestamp.input.md" --chat-history-file ".aider.history/$branch-$timestamp.chat.md"'
alias :q="tmux kill-pane"
alias bc="brew cleanup"
alias bd="brew doctor"
alias bi="brew install"
alias bic="brew install --cask"
alias bif="brew info"
alias bifc="brew info --cask"
alias bo="brew outdated"
alias bs="brew services"
alias bsr="brew services restart"
alias bu="brew update"
alias bug="brew upgrade"
alias c="code"
alias ci="code-insiders"
alias cx="chmod +x"
alias dc="docker compose"
alias dcd="docker compose down -v"
alias dcr="docker compose restart"
alias dcu="docker compose up -d" 
alias dps="docker ps --format 'table {{.Names}}\t{{.Status}}'"
alias e="exit"
# alias ee="espanso edit"
# alias er="espanso restart"
alias g="git status"
alias ga="git add ."
alias gb="git branch -v"
alias gc="git commit -S -m"
alias gca="git commit -S -av -m"
alias gcl="git clone"
alias gcn="git commit -S --no-verify -m"
alias gco="git checkout -b"
alias gd="git diff"
alias gex="nvim .git/info/exclude"
alias gf="git fetch --all"
alias gl="git pull"
alias gp="git push"
alias gpt="git push --tags"
alias gpc="gh pr checkout"
alias gpum="git pull upstream master"
alias gr="git rebase"
alias gra="git remote add"
alias grao="git remote add origin"
alias grau="git remote add upstream"
alias grH="git reset HEAD~"
alias gri="git rebase -i"
alias grm="git rebase main"
alias gro="git rebase --onto"
alias grv="git remote -v"
alias gs="git status"
alias gst="git status"
alias gt="git tag"
alias gw="git worktree"
alias gwa="git worktree add"
alias gwl="git worktree list"
alias gwr="git worktree remove"
alias gwp="git worktree prune"
alias h="history"
alias l="lsd --group-dirs first"
alias la="lsd --group-dirs first -A"
alias ld="lazydocker"
alias lg="lazygit"
alias ll="lsd --group-dirs first -Al"
alias ls="lsd --group-dirs first"
alias lt="lsd --group-dirs last -A --tree"
alias n="nvim"
alias nk="nvim ~/.config/karabiner/karabiner.json"
alias np="nvim package.json"
alias nt="nvim ~/.config/tmux/tmux.conf"
alias nz="nvim ~/.zshrc"
alias pnpm7="pnpx pnpm@latest-7"
alias pnpm8="pnpx pnpm@latest-8"
alias pnpm9="pnpx pnpm@latest-9"
alias pnx="pnpm exec nx"
alias pni="pnpm install"
alias pna="pnpm add"
alias pnd="pnpm dev"
alias pnb="pnpm build"
alias pns="pnpm start"
alias pnt="pnpm test"
alias st="tmux source ~/.config/tmux/tmux.conf"
alias sz="source ~/.zshrc"
alias t="tmux"
alias ta="tmux a"
alias tat="tmux attach -t"
alias tl="tmux list-sessions"
alias tn='tmux new -s `(pwd | sed "s/.*\///g")`'
alias tns="tmux new -s"
alias vt="nvim ~/.config/tmux/tmux.conf"
alias y="yarn"
alias ya="yarn add"
alias yad="yarn add -D"
alias yb="yarn build"
alias ybs="yarn build-storybook"
alias yc="yarn check-all"
alias yca="yarn check-architecture"
alias ycf="yarn check-format"
alias ycl="yarn check-lint"
alias yco="yarn check-oas"
alias yct="yarn check-types"
alias yd="yarn dev"
alias ydb="yarn b run debug"
alias ydh="yarn dev-https"
alias ye="yarn e2e"
alias yf="yarn format"
alias yg="yarn generate"
alias ygt="yarn generate-types"
alias yl="yarn lint"
alias yp="yarn preview"
alias ys="yarn start"
alias ysb="yarn storybook"
alias yt="yarn test"
alias yw="yarn watch"
alias unsetbase="git config --local --get-regexp '\.gh-resolved$' | cut -f1 -d' ' | xargs -L1 git config --unset "
alias touchBarKill="sudo pkill TouchBarServer; sudo killall ControlStrip"
alias ":vs"="tmux split-window -h"
alias knvim="NVIM_APPNAME=kickstart nvim"

# Variables
export PATH="$PATH:${HOME}/.local/bin"

# fnm
export PATH="$HOME/Library/Application Support/fnm:$PATH"
eval "`fnm env`"
export NODE_PATH="$FNM_MULTISHELL_PATH/bin/node"

export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools

export GOPATH=$HOME/go
export GOROOT="$(brew --prefix golang)/libexec"
export PATH="$PATH:${GOPATH}/bin:${GOROOT}/bin"

export SNDCPY_HOME=$HOME/sndcpy
export SNDCPY_APK=$HOME/sndcpy/sndcpy.apk

export LUNARVIM_RUNTIME_DIR=$HOME/.local/share/lunarvim
export LUNARVIM_CONFIG_DIR=$HOME/.config/lvim
export LUNARVIM_CACHE_DIR=$HOME/.cache/lvim

export PATH="$PATH:${HOME}/.cargo/bin"
# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$PATH:$HOME/.rvm/bin"

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR=$(brew --prefix sdkman-cli)/libexec
[[ -s "${SDKMAN_DIR}/bin/sdkman-init.sh" ]] && source "${SDKMAN_DIR}/bin/sdkman-init.sh"


# Load Angular CLI autocompletion.
# source <(ng completion script)

# pnpm
export PNPM_HOME="/Users/william.goulois/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
# pyenv end

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/homebrew/Caskroom/miniconda/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/opt/homebrew/Caskroom/miniconda/base/etc/profile.d/conda.sh" ]; then
        . "/opt/homebrew/Caskroom/miniconda/base/etc/profile.d/conda.sh"
    else
        export PATH="/opt/homebrew/Caskroom/miniconda/base/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

export PATH="/opt/homebrew/opt/libpq/bin:$PATH"
# The following lines have been added by Docker Desktop to enable Docker CLI completions.
fpath=(/Users/william.goulois/.docker/completions $fpath)
autoload -Uz compinit
compinit
# End of Docker CLI completions
